version: '3'

services:

  flask-app:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: flask-app
    ports:
      - 5000:5000
    command: python main.py
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        # waiting for the database to be ready
        condition: service_healthy
      redis:
        condition: service_started

  celery-worker:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: celery-worker
    command: celery -A main:celery_app worker --loglevel DEBUG -c ${CELERY_MAX_WORKERS}
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        # waiting for the database to be ready
        condition: service_healthy
      redis:
        condition: service_started

  flower:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: flower
    command: celery -A main:celery_app flower --port=5555
    ports:
      - 5555:5555
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        # waiting for the database to be ready
        condition: service_healthy
      redis:
        condition: service_started

  postgres:
    image: "postgres" # use latest official postgres version
    container_name: postgres-db
    restart: always
    ports:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - database-data:/var/lib/postgresql/data/
    healthcheck:
      # used in flask container depends_on condition to wait for the DB to be ready
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    
  redis:
    image: "redis:alpine"

volumes:
  database-data:
